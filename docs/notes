    1.  Issue : How to use docker compose?
        Good thing is I have used vagrant so, even tough I haven't used Docker I have an idea of how it works
        Went trought the docker docs and installed Docker and Docker compose
        For Docker : https://docs.docker.com/install/#server
        https://docs.docker.com/install/linux/docker-ce/ubuntu/
        Followed the steps in the documentation, was straightforward
        For Docker componse : https://docs.docker.com/compose/install/#install-compose

    2.  Issue: How to fix/setup the network
        Read a bunch of doc from docker compose until I got an idea of how to configure the networks as I was asked
        https://docs.docker.com/compose/networking/
        
    3.  Issue: Facing Go for the first time
        I haven't used golang before so I needed to install it and learn some syntax in order to complete the challenge
        Fisrt I installed go following the docs on their page : https://golang.org/doc/install?download=go1.10.linux-amd64.tar.gz
        Also installed the golang extention on my vscode
        Go turned out to be pretty awesome and fun to work with
        Some things like the multiple returns, the variable declarations inside if conditions come really handy
        I actually been wanted to learn go for a while and this came as a great excuse to finally do it and I think it turned out great
        
    4.  Issue: Google drive API integration
        Used the quickstart guide to setup a simple test: https://developers.google.com/drive/v3/web/quickstart/go

    5.  Issue: Configure the database to load scripts on build
        Read the dockerfile for the image version https://github.com/docker-library/mysql/blob/ad625c64a06e16683e997e5a0147508d115f4989/5.7/Dockerfile

    6.  Testing the app
        For testing/debugging I used zaproxy so I can mess with the requests as I please

    7.  Securing nginx
        I used this as a reference to add a couple of security-related headers. Nathing too fancy
        https://gist.github.com/plentz/6737338

    8. Unit tests
        Started reading this guide: https://blog.alexellis.io/golang-writing-unit-tests/
        And also using some of the template code that was present in the challenge as a reference
    
    9. Integration tests
        I simple used the unit tests I had written as a reference to write some very simple integration tests